{"version":3,"sources":["DrawArea.js","App.js","serviceWorker.js","index.js"],"names":["DrawArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mouseMoved","e","preventDefault","_this$state","state","clicked","draw","id","color","x","nativeEvent","offsetX","y","offsetY","pressure","lineWidth","socket","emit","lineTo","stroke","setState","resetStatus","setTimeout","statusMessage","mouseDown","beginPath","mouseUp","save","mouseLeave","setName","_this$state2","name","handleChangeComplete","strokeStyle","hex","users","pathStarted","_this2","io","on","data","cursor","console","log","style","left","top","draw2","moveTo","concat","canvas","refs","getContext","partner","_this3","react_default","a","createElement","InputGroup","Label","Input","onChange","target","value","Button","onClick","ref","width","height","onPointerDown","onPointerUp","onPointerMove","react_color_lib","onChangeComplete","Alert","Component","App","className","DrawArea_DrawArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cc2a1f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Alert, InputGroup, Input, Button, Label } from 'reactstrap';\r\nimport { SketchPicker } from 'react-color';\r\n\r\nexport default class DrawArea extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            users: {},\r\n            statusMessage: null,\r\n            pathStarted: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = io('https://draw-with-me-socket.herokuapp.com/');\r\n        socket.on('userData', (data) => {\r\n            this.setState({\r\n                id: data.id\r\n            });\r\n        });\r\n        socket.on('mouse', (data) => {\r\n            if (data.id !== this.state.id) {\r\n                let cursor = this.state.cursor;\r\n                console.log(cursor);\r\n                cursor.style.left = data.x + \"px\";\r\n                cursor.style.top = data.y + \"px\";\r\n                if (data.clicked) {\r\n                    const draw2 = this.state.draw2;\r\n                    draw2.strokeStyle = data.color;\r\n                    if (!this.state.pathStarted) {\r\n                        draw2.beginPath();\r\n                        draw2.moveTo(data.x, data.y)\r\n                        this.setState({\r\n                            pathStarted: true\r\n                        });\r\n                    } else {\r\n                        draw2.lineTo(data.x, data.y);\r\n                        draw2.stroke();\r\n                    }\r\n                } else {\r\n                    this.setState({\r\n                        pathStarted: false\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        socket.on('userConnect', data => {\r\n            this.setState({\r\n                statusMessage: `${data.id} joined the drawing.`\r\n            });\r\n            this.resetStatus();\r\n        });\r\n        socket.on('userDisconnect', data => {\r\n            this.setState({\r\n                statusMessage: `${data.name} left the drawing.`\r\n            });\r\n            this.resetStatus();\r\n        });\r\n        const canvas = this.refs.canvas;\r\n        const draw = canvas.getContext('2d');\r\n        const canvas2 = this.refs.partner;\r\n        const draw2 = canvas2.getContext('2d');\r\n        const cursor = this.refs.cursor;\r\n        this.setState({\r\n            canvas: canvas,\r\n            draw: draw,\r\n            draw2: draw2,\r\n            socket: socket,\r\n            cursor: cursor\r\n        });\r\n    }\r\n\r\n    mouseMoved = (e) => {\r\n        e.preventDefault();\r\n        const { clicked, draw, id, color } = this.state;\r\n        let x = e.nativeEvent.offsetX;\r\n        let y = e.nativeEvent.offsetY;\r\n        if (e.pressure) {\r\n            draw.lineWidth = 1 * e.pressure;\r\n        } else {\r\n            draw.lineWidth = 10;\r\n        }\r\n        this.state.socket.emit(\"mouse\", {\r\n            x: x,\r\n            y: y,\r\n            clicked: clicked,\r\n            id: id,\r\n            color: color\r\n        });\r\n        if (clicked) {\r\n            draw.lineTo(x, y);\r\n            draw.stroke();\r\n        }\r\n        this.setState({ x: x, y: y });\r\n    }\r\n\r\n    resetStatus = () => {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                statusMessage: null\r\n            });\r\n        }, 3000);\r\n    }\r\n\r\n    mouseDown = () => {\r\n        this.setState({ clicked: true });\r\n        this.state.draw.beginPath();\r\n    }\r\n\r\n    mouseUp = () => {\r\n        this.setState({ clicked: false });\r\n        this.state.draw.save();\r\n    }\r\n\r\n    mouseLeave = () => {\r\n        this.state.socket.emit(\"mouse\", {\r\n            clicked: false\r\n        });\r\n        this.setState({\r\n            clicked: false\r\n        });\r\n        this.state.draw.save();\r\n    }\r\n\r\n    setName = () => {\r\n        const { id, name, socket } = this.state;\r\n        socket.emit(\"nameSelect\", { id: id, name });\r\n    }\r\n\r\n    handleChangeComplete = (color) => {\r\n        const { draw } = this.state;\r\n        draw.strokeStyle = color.hex;\r\n        this.setState({ color: color.hex });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <InputGroup id=\"name-set\">\r\n                    <Label>Name</Label>\r\n                    <Input onChange={(e) => this.setState({ name: e.target.value })}></Input>\r\n                    <Button onClick={this.setName}>Set</Button>\r\n                </InputGroup>\r\n                <div id=\"sketch-area\">\r\n                    <div ref=\"cursor\" id=\"cursor\"></div>\r\n                    <canvas ref=\"canvas\" id=\"layer2\" width={900} height={425} onPointerDown={this.mouseDown} onPointerUp={this.mouseUp} onPointerMove={this.mouseMoved}></canvas>\r\n                    <canvas ref=\"partner\" id=\"layer1\" width={900} height={425}></canvas>\r\n                    <SketchPicker color={this.state.color} onChangeComplete={this.handleChangeComplete}></SketchPicker>\r\n                </div>\r\n                {this.state.statusMessage && <Alert>{this.state.statusMessage}</Alert>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport DrawArea from './DrawArea';\n\nclass App extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<DrawArea></DrawArea>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}