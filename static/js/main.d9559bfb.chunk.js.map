{"version":3,"sources":["DrawArea.js","App.js","serviceWorker.js","index.js"],"names":["DrawArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mouseMoved","e","nativeEvent","preventDefault","_this$state","state","clicked","draw","id","color","x","offsetX","y","offsetY","pressure","lineWidth","width","socket","emit","name","props","lineTo","stroke","setState","resetStatus","setTimeout","statusMessage","mouseDown","beginPath","mouseUp","mouseLeave","savePic","_this$state2","draw2","final","drawImage","canvas","pictureLink","toDataURL","link","document","createElement","setAttribute","click","setName","_this$state3","handleChangeComplete","strokeStyle","hex","sidebar","main","refs","sidenav","style","marginRight","sidebarToggle","closeSidebar","users","pathStarted","partner","_this2","io","on","data","cursor","left","top","moveTo","concat","getContext","combineIt","_this3","react_default","a","ref","className","height","onPointerDown","onPointerUp","onPointerMove","display","Button","onClick","Alert","reactrangeslider_lib","defaultValue","step","min","max","onChange","react_color_lib","onChangeComplete","Component","App","DrawArea_DrawArea","onSubmit","Input","input","target","value","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9559bfb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Alert, Button } from 'reactstrap';\r\nimport { SketchPicker } from 'react-color';\r\nimport { Slider } from 'reactrangeslider';\r\n\r\nexport default class DrawArea extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            users: {},\r\n            statusMessage: null,\r\n            pathStarted: false,\r\n            partner: null,\r\n            sidebarToggle: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = io('https://draw-with-me-socket.herokuapp.com/');\r\n        socket.emit(\"name\", {\r\n            name: this.props.name\r\n        });\r\n        socket.on('userData', (data) => {\r\n            this.setState({\r\n                id: data.id\r\n            });\r\n        });\r\n        socket.on('mouse', (data) => {\r\n            if (data.id !== this.state.id) {\r\n                if (!this.state.partner) {\r\n                    this.setState({\r\n                        partner: data.name\r\n                    });\r\n                }\r\n                let cursor = this.state.cursor;\r\n                cursor.style.left = data.x + \"px\";\r\n                cursor.style.top = data.y + \"px\";\r\n                if (data.clicked) {\r\n                    const draw2 = this.state.draw2;\r\n                    draw2.strokeStyle = data.color;\r\n                    if (!this.state.pathStarted) {\r\n                        draw2.beginPath();\r\n                        draw2.moveTo(data.x, data.y)\r\n                        this.setState({\r\n                            pathStarted: true\r\n                        });\r\n                    } else {\r\n                        draw2.lineTo(data.x, data.y);\r\n                        draw2.stroke();\r\n                    }\r\n                } else {\r\n                    this.setState({\r\n                        pathStarted: false\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        socket.on('userConnect', data => {\r\n            if (data.id !== this.state.id) {\r\n                this.setState({\r\n                    statusMessage: `${data.name} joined the drawing.`,\r\n                    partner: data.name\r\n                });\r\n                this.resetStatus();\r\n            }\r\n        });\r\n        socket.on('userDisconnect', data => {\r\n            this.setState({\r\n                partner: null,\r\n                statusMessage: `${data.name} left the drawing.`\r\n            });\r\n            this.resetStatus();\r\n        });\r\n        const canvas = this.refs.canvas;\r\n        const draw = canvas.getContext('2d');\r\n        const canvas2 = this.refs.partner;\r\n        const draw2 = canvas2.getContext('2d');\r\n        const cursor = this.refs.cursor;\r\n        const combine = this.refs.final;\r\n        const combineIt = combine.getContext('2d');\r\n        this.setState({\r\n            canvas: canvas,\r\n            draw: draw,\r\n            draw2: draw2,\r\n            socket: socket,\r\n            cursor: cursor,\r\n            final: combineIt\r\n        });\r\n    }\r\n\r\n    mouseMoved = (e) => {\r\n        e.nativeEvent.preventDefault();\r\n        const { clicked, draw, id, color } = this.state;\r\n        let x = e.nativeEvent.offsetX;\r\n        let y = e.nativeEvent.offsetY;\r\n        if (e.pressure) {\r\n            draw.lineWidth = 1 * e.pressure * this.state.width;\r\n        } else {\r\n            draw.lineWidth = this.state.width;\r\n        }\r\n        this.state.socket.emit(\"mouse\", {\r\n            x: x,\r\n            y: y,\r\n            clicked: clicked,\r\n            id: id,\r\n            color: color,\r\n            name: this.props.name\r\n        });\r\n        if (clicked) {\r\n            draw.lineTo(x, y);\r\n            draw.stroke();\r\n        }\r\n        this.setState({ x: x, y: y });\r\n    }\r\n\r\n    resetStatus = () => {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                statusMessage: null\r\n            });\r\n        }, 3000);\r\n    }\r\n\r\n    mouseDown = () => {\r\n        this.setState({ clicked: true });\r\n        this.state.draw.beginPath();\r\n    }\r\n\r\n    mouseUp = () => {\r\n        this.state.socket.emit(\"mouse\", {\r\n            clicked: false\r\n        });\r\n        this.setState({ clicked: false });\r\n    }\r\n\r\n    mouseLeave = () => {\r\n        this.state.socket.emit(\"mouse\", {\r\n            clicked: false\r\n        });\r\n        this.setState({\r\n            clicked: false\r\n        });\r\n    }\r\n\r\n    savePic = () => {\r\n        const { draw, draw2, final } = this.state;\r\n        final.drawImage(draw.canvas, 0, 0);\r\n        final.drawImage(draw2.canvas, 0, 0);\r\n        let pictureLink = final.canvas.toDataURL('img/png');\r\n        let link = document.createElement(\"a\");\r\n        link.setAttribute(\"href\", pictureLink);\r\n        link.setAttribute(\"download\", \"drawing.png\");\r\n        link.click();\r\n    }\r\n\r\n    setName = () => {\r\n        const { id, name, socket } = this.state;\r\n        socket.emit(\"nameSelect\", { id: id, name });\r\n    }\r\n\r\n    handleChangeComplete = (color) => {\r\n        const { draw } = this.state;\r\n        draw.strokeStyle = color.hex;\r\n        this.setState({ color: color.hex });\r\n    }\r\n\r\n    sidebar = () => {\r\n        let main = this.refs.main;\r\n        let sidebar = this.refs.sidenav;\r\n        sidebar.style.width = \"250px\";\r\n        main.style.marginRight = \"250px\";\r\n        this.setState({\r\n            sidebarToggle: true\r\n        });\r\n    }\r\n\r\n    closeSidebar = () => {\r\n        let main = this.refs.main;\r\n        let sidebar = this.refs.sidenav;\r\n        sidebar.style.width = \"0px\";\r\n        main.style.marginRight = \"0px\";\r\n        this.setState({\r\n            sidebarToggle: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main>\r\n                <div id=\"main\" ref=\"main\">\r\n                    <div id=\"sketch-area\">\r\n                        <div ref=\"cursor\" className={this.state.partner ? \"\" : \"hide\"} id=\"cursor\">\r\n                            <p id=\"name\">{this.state.partner}</p>\r\n                        </div>\r\n                        <canvas ref=\"canvas\" id=\"layer2\" width={900} height={425} onPointerDown={this.mouseDown} onPointerUp={this.mouseUp} onPointerMove={this.mouseMoved}></canvas>\r\n                        <canvas ref=\"partner\" id=\"layer1\" width={900} height={425}></canvas>\r\n                        <canvas style={{ display: 'none' }} ref=\"final\" width={900} height={425}></canvas>\r\n                    </div>\r\n                    <Button onClick={this.savePic}>Save Drawing!</Button>\r\n                    {this.state.statusMessage && <Alert>{this.state.statusMessage}</Alert>}\r\n                </div>\r\n                <Button onClick={() => {\r\n                    this.state.sidebarToggle ? this.closeSidebar() : this.sidebar();\r\n                }}>Tools</Button>\r\n                <div className=\"sidenav\" ref=\"sidenav\">\r\n                    <h4>Line width</h4>\r\n                    <Slider defaultValue={20} step={5} min={5} max={60} onChange={(width) => this.setState({ width: width })} />\r\n                    <SketchPicker color={this.state.color} onChangeComplete={this.handleChangeComplete}></SketchPicker>\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport { Input, Button } from 'reactstrap';\nimport DrawArea from './DrawArea';\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tname: ''\n\t\t}\n\t}\n\n\trender() {\n\t\tconst name = this.state.name;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{name ?\n\t\t\t\t\t<DrawArea name={name}></DrawArea> :\n\t\t\t\t\t<form onSubmit={e => e.preventDefault()}>\n\t\t\t\t\t\t<h1>Draw with Me</h1>\n\t\t\t\t\t\t<h3>Enter your name!</h3>\n\t\t\t\t\t\t<Input onChange={(e) => this.setState({ input: e.target.value })}></Input>\n\t\t\t\t\t\t<Button type=\"submit\" onClick={(e) => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tthis.setState({ name: this.state.input });\n\t\t\t\t\t\t}}>Confirm</Button>\n\t\t\t\t\t</form>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}