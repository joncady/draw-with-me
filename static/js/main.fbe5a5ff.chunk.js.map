{"version":3,"sources":["DrawArea.js","App.js","serviceWorker.js","index.js"],"names":["DrawArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mouseMoved","e","nativeEvent","preventDefault","_this$state","state","clicked","draw","id","color","x","offsetX","y","offsetY","pressure","lineWidth","socket","emit","lineTo","stroke","setState","resetStatus","setTimeout","statusMessage","mouseDown","beginPath","mouseUp","mouseLeave","setName","_this$state2","name","handleChangeComplete","strokeStyle","hex","users","pathStarted","_this2","io","props","on","data","cursor","style","left","top","draw2","moveTo","concat","canvas","refs","getContext","partner","react_default","a","createElement","ref","width","height","onPointerDown","onPointerUp","onPointerMove","react_color_lib","onChangeComplete","Alert","Component","App","className","DrawArea_DrawArea","Input","onChange","input","target","value","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAKqBA,cAEjB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAuEJI,WAAa,SAACC,GACVA,EAAEC,YAAYC,iBADE,IAAAC,EAEqBX,EAAKY,MAAlCC,EAFQF,EAERE,QAASC,EAFDH,EAECG,KAAMC,EAFPJ,EAEOI,GAAIC,EAFXL,EAEWK,MACvBC,EAAIT,EAAEC,YAAYS,QAClBC,EAAIX,EAAEC,YAAYW,QAClBZ,EAAEa,SACFP,EAAKQ,UAAY,EAAId,EAAEa,SAEvBP,EAAKQ,UAAY,GAErBtB,EAAKY,MAAMW,OAAOC,KAAK,QAAS,CAC5BP,EAAGA,EACHE,EAAGA,EACHN,QAASA,EACTE,GAAIA,EACJC,MAAOA,IAEPH,IACAC,EAAKW,OAAOR,EAAGE,GACfL,EAAKY,UAET1B,EAAK2B,SAAS,CAAEV,EAAGA,EAAGE,EAAGA,KA7FfnB,EAgGd4B,YAAc,WACVC,WAAW,WACP7B,EAAK2B,SAAS,CACVG,cAAe,QAEpB,MArGO9B,EAwGd+B,UAAY,WACR/B,EAAK2B,SAAS,CAAEd,SAAS,IACzBb,EAAKY,MAAME,KAAKkB,aA1GNhC,EA6GdiC,QAAU,WACNjC,EAAKY,MAAMW,OAAOC,KAAK,QAAS,CAC5BX,SAAS,IAEbb,EAAK2B,SAAS,CAAEd,SAAS,KAjHfb,EAoHdkC,WAAa,WACTlC,EAAKY,MAAMW,OAAOC,KAAK,QAAS,CAC5BX,SAAS,IAEbb,EAAK2B,SAAS,CACVd,SAAS,KAzHHb,EA6HdmC,QAAU,WAAM,IAAAC,EACiBpC,EAAKY,MAA1BG,EADIqB,EACJrB,GAAIsB,EADAD,EACAC,KADAD,EACMb,OACXC,KAAK,aAAc,CAAET,GAAIA,EAAIsB,UA/H1BrC,EAkIdsC,qBAAuB,SAACtB,GACHhB,EAAKY,MAAdE,KACHyB,YAAcvB,EAAMwB,IACzBxC,EAAK2B,SAAS,CAAEX,MAAOA,EAAMwB,OAnI7BxC,EAAKY,MAAQ,CACT6B,MAAO,GACPX,cAAe,KACfY,aAAa,GALP1C,mFASM,IAAA2C,EAAAxC,KACVoB,EAASqB,IAAG,8CAClBrB,EAAOC,KAAK,OAAQ,CAChBa,KAAMlC,KAAK0C,MAAMR,OAErBd,EAAOuB,GAAG,WAAY,SAACC,GACnBJ,EAAKhB,SAAS,CACVZ,GAAIgC,EAAKhC,OAGjBQ,EAAOuB,GAAG,QAAS,SAACC,GAChB,GAAIA,EAAKhC,KAAO4B,EAAK/B,MAAMG,GAAI,CAC3B,IAAIiC,EAASL,EAAK/B,MAAMoC,OAGxB,GAFAA,EAAOC,MAAMC,KAAOH,EAAK9B,EAAI,KAC7B+B,EAAOC,MAAME,IAAMJ,EAAK5B,EAAI,KACxB4B,EAAKlC,QAAS,CACd,IAAMuC,EAAQT,EAAK/B,MAAMwC,MACzBA,EAAMb,YAAcQ,EAAK/B,MACpB2B,EAAK/B,MAAM8B,aAOZU,EAAM3B,OAAOsB,EAAK9B,EAAG8B,EAAK5B,GAC1BiC,EAAM1B,WAPN0B,EAAMpB,YACNoB,EAAMC,OAAON,EAAK9B,EAAG8B,EAAK5B,GAC1BwB,EAAKhB,SAAS,CACVe,aAAa,UAOrBC,EAAKhB,SAAS,CACVe,aAAa,OAK7BnB,EAAOuB,GAAG,cAAe,SAAAC,GACjBA,EAAKhC,KAAO4B,EAAK/B,MAAMG,KACvB4B,EAAKhB,SAAS,CACVG,cAAa,GAAAwB,OAAKP,EAAKV,KAAV,0BAEjBM,EAAKf,iBAGbL,EAAOuB,GAAG,iBAAkB,SAAAC,GACxBJ,EAAKhB,SAAS,CACVG,cAAa,GAAAwB,OAAKP,EAAKV,KAAV,wBAEjBM,EAAKf,gBAET,IAAM2B,EAASpD,KAAKqD,KAAKD,OACnBzC,EAAOyC,EAAOE,WAAW,MAEzBL,EADUjD,KAAKqD,KAAKE,QACJD,WAAW,MAC3BT,EAAS7C,KAAKqD,KAAKR,OACzB7C,KAAKwB,SAAS,CACV4B,OAAQA,EACRzC,KAAMA,EACNsC,MAAOA,EACP7B,OAAQA,EACRyB,OAAQA,qCAqEZ,OACIW,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAK9C,GAAG,eACJ4C,EAAAC,EAAAC,cAAA,OAAKC,IAAI,SAAS/C,GAAG,WACrB4C,EAAAC,EAAAC,cAAA,UAAQC,IAAI,SAAS/C,GAAG,SAASgD,MAAO,IAAKC,OAAQ,IAAKC,cAAe9D,KAAK4B,UAAWmC,YAAa/D,KAAK8B,QAASkC,cAAehE,KAAKI,aACxIoD,EAAAC,EAAAC,cAAA,UAAQC,IAAI,UAAU/C,GAAG,SAASgD,MAAO,IAAKC,OAAQ,MACtDL,EAAAC,EAAAC,cAACO,EAAA,aAAD,CAAcpD,MAAOb,KAAKS,MAAMI,MAAOqD,iBAAkBlE,KAAKmC,wBAEjEnC,KAAKS,MAAMkB,eAAiB6B,EAAAC,EAAAC,cAACS,EAAA,EAAD,KAAQnE,KAAKS,MAAMkB,uBAnJ1ByC,aCyBvBC,cAxBd,SAAAA,IAAc,IAAAxE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqE,IACbxE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuE,GAAAlE,KAAAH,QACKS,MAAQ,CACZyB,KAAM,IAHMrC,wEAOL,IAAA2C,EAAAxC,KACFkC,EAAOlC,KAAKS,MAAMyB,KACxB,OACCsB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbpC,EACAsB,EAAAC,EAAAC,cAACa,EAAD,CAAUrC,KAAMA,IAChBsB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,SAAU,SAACpE,GAAD,OAAOmC,EAAKhB,SAAS,CAAEkD,MAAOrE,EAAEsE,OAAOC,WACxDpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQC,QAAS,kBAAMtC,EAAKhB,SAAS,CAAEU,KAAMM,EAAK/B,MAAMiE,UAAxD,oBAlBYN,aCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fbe5a5ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Alert } from 'reactstrap';\r\nimport { SketchPicker } from 'react-color';\r\n\r\nexport default class DrawArea extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            users: {},\r\n            statusMessage: null,\r\n            pathStarted: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = io('https://draw-with-me-socket.herokuapp.com/');\r\n        socket.emit(\"name\", {\r\n            name: this.props.name\r\n        });\r\n        socket.on('userData', (data) => {\r\n            this.setState({\r\n                id: data.id\r\n            });\r\n        });\r\n        socket.on('mouse', (data) => {\r\n            if (data.id !== this.state.id) {\r\n                let cursor = this.state.cursor;\r\n                cursor.style.left = data.x + \"px\";\r\n                cursor.style.top = data.y + \"px\";\r\n                if (data.clicked) {\r\n                    const draw2 = this.state.draw2;\r\n                    draw2.strokeStyle = data.color;\r\n                    if (!this.state.pathStarted) {\r\n                        draw2.beginPath();\r\n                        draw2.moveTo(data.x, data.y)\r\n                        this.setState({\r\n                            pathStarted: true\r\n                        });\r\n                    } else {\r\n                        draw2.lineTo(data.x, data.y);\r\n                        draw2.stroke();\r\n                    }\r\n                } else {\r\n                    this.setState({\r\n                        pathStarted: false\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        socket.on('userConnect', data => {\r\n            if (data.id !== this.state.id) {\r\n                this.setState({\r\n                    statusMessage: `${data.name} joined the drawing.`\r\n                });\r\n                this.resetStatus();\r\n            }\r\n        });\r\n        socket.on('userDisconnect', data => {\r\n            this.setState({\r\n                statusMessage: `${data.name} left the drawing.`\r\n            });\r\n            this.resetStatus();\r\n        });\r\n        const canvas = this.refs.canvas;\r\n        const draw = canvas.getContext('2d');\r\n        const canvas2 = this.refs.partner;\r\n        const draw2 = canvas2.getContext('2d');\r\n        const cursor = this.refs.cursor;\r\n        this.setState({\r\n            canvas: canvas,\r\n            draw: draw,\r\n            draw2: draw2,\r\n            socket: socket,\r\n            cursor: cursor\r\n        });\r\n    }\r\n\r\n    mouseMoved = (e) => {\r\n        e.nativeEvent.preventDefault();\r\n        const { clicked, draw, id, color } = this.state;\r\n        let x = e.nativeEvent.offsetX;\r\n        let y = e.nativeEvent.offsetY;\r\n        if (e.pressure) {\r\n            draw.lineWidth = 1 * e.pressure;\r\n        } else {\r\n            draw.lineWidth = 10;\r\n        }\r\n        this.state.socket.emit(\"mouse\", {\r\n            x: x,\r\n            y: y,\r\n            clicked: clicked,\r\n            id: id,\r\n            color: color\r\n        });\r\n        if (clicked) {\r\n            draw.lineTo(x, y);\r\n            draw.stroke();\r\n        }\r\n        this.setState({ x: x, y: y });\r\n    }\r\n\r\n    resetStatus = () => {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                statusMessage: null\r\n            });\r\n        }, 3000);\r\n    }\r\n\r\n    mouseDown = () => {\r\n        this.setState({ clicked: true });\r\n        this.state.draw.beginPath();\r\n    }\r\n\r\n    mouseUp = () => {\r\n        this.state.socket.emit(\"mouse\", {\r\n            clicked: false\r\n        });\r\n        this.setState({ clicked: false });\r\n    }\r\n\r\n    mouseLeave = () => {\r\n        this.state.socket.emit(\"mouse\", {\r\n            clicked: false\r\n        });\r\n        this.setState({\r\n            clicked: false\r\n        });\r\n    }\r\n\r\n    setName = () => {\r\n        const { id, name, socket } = this.state;\r\n        socket.emit(\"nameSelect\", { id: id, name });\r\n    }\r\n\r\n    handleChangeComplete = (color) => {\r\n        const { draw } = this.state;\r\n        draw.strokeStyle = color.hex;\r\n        this.setState({ color: color.hex });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"sketch-area\">\r\n                    <div ref=\"cursor\" id=\"cursor\"></div>\r\n                    <canvas ref=\"canvas\" id=\"layer2\" width={900} height={425} onPointerDown={this.mouseDown} onPointerUp={this.mouseUp} onPointerMove={this.mouseMoved}></canvas>\r\n                    <canvas ref=\"partner\" id=\"layer1\" width={900} height={425}></canvas>\r\n                    <SketchPicker color={this.state.color} onChangeComplete={this.handleChangeComplete}></SketchPicker>\r\n                </div>\r\n                {this.state.statusMessage && <Alert>{this.state.statusMessage}</Alert>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport { Input, Button } from 'reactstrap';\nimport DrawArea from './DrawArea';\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tname: ''\n\t\t}\n\t}\n\n\trender() {\n\t\tconst name = this.state.name;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{name ?\n\t\t\t\t\t<DrawArea name={name}></DrawArea> :\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h3>Enter your name!</h3>\n\t\t\t\t\t\t<Input onChange={(e) => this.setState({ input: e.target.value })}></Input>\n\t\t\t\t\t\t<Button onClick={() => this.setState({ name: this.state.input })}>Confirm</Button>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}