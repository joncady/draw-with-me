{"version":3,"sources":["DrawArea.js","App.js","serviceWorker.js","index.js"],"names":["DrawArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mouseMoved","e","_this$state","state","clicked","draw","id","x","nativeEvent","offsetX","y","offsetY","socket","emit","lineTo","stroke","setState","resetStatus","setTimeout","statusMessage","mouseDown","beginPath","mouseUp","mouseLeave","touch","touches","mouseEvent","MouseEvent","clientX","clientY","dispatchEvent","setName","_this$state2","name","users","pathStarted","_this2","io","on","data","draw2","moveTo","console","log","concat","refs","canvas","getContext","partner","_this3","react_default","a","createElement","InputGroup","Label","Input","onChange","target","value","Button","onClick","ref","width","height","onTouchMove","onMouseDown","onMouseLeave","onMouseUp","onMouseMove","Alert","Component","App","className","DrawArea_DrawArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAIqBA,cAEjB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA4DJI,WAAa,SAACC,GAAM,IAAAC,EACcT,EAAKU,MAA3BC,EADQF,EACRE,QAASC,EADDH,EACCG,KAAMC,EADPJ,EACOI,GACnBC,EAAIN,EAAEO,YAAYC,QAClBC,EAAIT,EAAEO,YAAYG,QACtBlB,EAAKU,MAAMS,OAAOC,KAAK,QAAS,CAC5BN,EAAGA,EACHG,EAAGA,EACHN,QAASA,EACTE,GAAIA,IAEJF,IACAC,EAAKS,OAAOP,EAAGG,GACfL,EAAKU,UAETtB,EAAKuB,SAAS,CAAET,EAAGA,EAAGG,EAAGA,KA3EfjB,EA8EdwB,YAAc,WACVC,WAAW,WACPzB,EAAKuB,SAAS,CACVG,cAAe,QAEpB,MAnFO1B,EAsFd2B,UAAY,WACR3B,EAAKuB,SAAS,CAAEZ,SAAS,IACzBX,EAAKU,MAAME,KAAKgB,aAxFN5B,EA2Fd6B,QAAU,WACN7B,EAAKuB,SAAS,CAAEZ,SAAS,KA5FfX,EA+Fd8B,WAAa,WACT9B,EAAKU,MAAMS,OAAOC,KAAK,QAAS,CAC5BT,SAAS,IAEbX,EAAKuB,SAAS,CACVZ,SAAS,KApGHX,EAwGd+B,MAAQ,SAACvB,GACL,IAAIuB,EAAQvB,EAAEwB,QAAQ,GAClBC,EAAa,IAAIC,WAAW,YAAa,CACzCC,QAASJ,EAAMI,QACfC,QAASL,EAAMK,UAEnBpC,EAAKU,MAAME,KAAKyB,cAAcJ,IA9GpBjC,EAiHdsC,QAAU,WAAM,IAAAC,EACiBvC,EAAKU,MAA1BG,EADI0B,EACJ1B,GAAI2B,EADAD,EACAC,KADAD,EACMpB,OACXC,KAAK,aAAc,CAAEP,GAAIA,EAAI2B,UAjHpCxC,EAAKU,MAAQ,CACT+B,MAAO,GACPf,cAAe,KACfgB,aAAa,GALP1C,mFASM,IAAA2C,EAAAxC,KACVgB,EAASyB,IAAG,8CAClBzB,EAAO0B,GAAG,WAAY,SAACC,GACnBH,EAAKpB,SAAS,CACVV,GAAIiC,EAAKjC,OAGjBM,EAAO0B,GAAG,QAAS,SAACC,GAChB,GAAIA,EAAKjC,KAAO8B,EAAKjC,MAAMG,GACvB,GAAIiC,EAAKnC,QAAS,CACd,IAAMoC,EAAQJ,EAAKjC,MAAMqC,MACpBJ,EAAKjC,MAAMgC,aAOZK,EAAM1B,OAAOyB,EAAKhC,EAAGgC,EAAK7B,GAC1B8B,EAAMzB,WAPNyB,EAAMnB,YACNmB,EAAMC,OAAOF,EAAKhC,EAAGgC,EAAK7B,GAC1B0B,EAAKpB,SAAS,CACVmB,aAAa,UAOrBC,EAAKpB,SAAS,CACVmB,aAAa,MAK7BvB,EAAO0B,GAAG,cAAe,SAAAC,GACrBG,QAAQC,IAAIJ,GACZH,EAAKpB,SAAS,CACVG,cAAa,GAAAyB,OAAKL,EAAKjC,GAAV,0BAEjB8B,EAAKnB,gBAETL,EAAO0B,GAAG,iBAAkB,SAAAC,GACxBH,EAAKpB,SAAS,CACVG,cAAa,GAAAyB,OAAKL,EAAKN,KAAV,wBAEjBG,EAAKnB,gBAET,IACMZ,EADST,KAAKiD,KAAKC,OACLC,WAAW,MAEzBP,EADU5C,KAAKiD,KAAKG,QACJD,WAAW,MACjCnD,KAAKoB,SAAS,CACVX,KAAMA,EACNmC,MAAOA,EACP5B,OAAQA,qCA6DP,IAAAqC,EAAArD,KACL,OACIsD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAY/C,GAAG,YACX4C,EAAAC,EAAAC,cAACE,EAAA,EAAD,aACAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,SAAU,SAACvD,GAAD,OAAOgD,EAAKjC,SAAS,CAAEiB,KAAMhC,EAAEwD,OAAOC,WACvDR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQC,QAAShE,KAAKmC,SAAtB,QAEJmB,EAAAC,EAAAC,cAAA,UAAQS,IAAI,SAASvD,GAAG,SAASwD,MAAO,IAAKC,OAAQ,IAAKC,YAAapE,KAAK4B,MAAOyC,YAAarE,KAAKwB,UAAW8C,aAActE,KAAK2B,WAAY4C,UAAWvE,KAAK0B,QAAS8C,YAAaxE,KAAKI,aAC1LkD,EAAAC,EAAAC,cAAA,UAAQS,IAAI,UAAUvD,GAAG,SAASwD,MAAO,IAAKC,OAAQ,MACrDnE,KAAKO,MAAMgB,eAAiB+B,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KAAQzE,KAAKO,MAAMgB,uBAlI1BmD,aCUvBC,mLARb,OACCrB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OACdtB,EAAAC,EAAAC,cAACqB,EAAD,cALcH,aCSEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b4100cb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Alert, InputGroup, Input, Button, Label } from 'reactstrap';\r\n\r\nexport default class DrawArea extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            users: {},\r\n            statusMessage: null,\r\n            pathStarted: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = io('https://draw-with-me-socket.herokuapp.com/');\r\n        socket.on('userData', (data) => {\r\n            this.setState({\r\n                id: data.id\r\n            });\r\n        });\r\n        socket.on('mouse', (data) => {\r\n            if (data.id !== this.state.id) {\r\n                if (data.clicked) {\r\n                    const draw2 = this.state.draw2;\r\n                    if (!this.state.pathStarted) {\r\n                        draw2.beginPath();\r\n                        draw2.moveTo(data.x, data.y)\r\n                        this.setState({\r\n                            pathStarted: true\r\n                        });\r\n                    } else {\r\n                        draw2.lineTo(data.x, data.y);\r\n                        draw2.stroke();\r\n                    }\r\n                } else {\r\n                    this.setState({\r\n                        pathStarted: false\r\n                    })\r\n                }\r\n            }\r\n        });\r\n        socket.on('userConnect', data => {\r\n            console.log(data);\r\n            this.setState({\r\n                statusMessage: `${data.id} joined the drawing.`\r\n            });\r\n            this.resetStatus();\r\n        });\r\n        socket.on('userDisconnect', data => {\r\n            this.setState({\r\n                statusMessage: `${data.name} left the drawing.`\r\n            });\r\n            this.resetStatus();\r\n        });\r\n        const canvas = this.refs.canvas;\r\n        const draw = canvas.getContext('2d');\r\n        const canvas2 = this.refs.partner;\r\n        const draw2 = canvas2.getContext('2d');\r\n        this.setState({\r\n            draw: draw,\r\n            draw2: draw2,\r\n            socket: socket\r\n        });\r\n    }\r\n\r\n    mouseMoved = (e) => {\r\n        const { clicked, draw, id } = this.state;\r\n        let x = e.nativeEvent.offsetX;\r\n        let y = e.nativeEvent.offsetY;\r\n        this.state.socket.emit(\"mouse\", {\r\n            x: x,\r\n            y: y,\r\n            clicked: clicked,\r\n            id: id\r\n        });\r\n        if (clicked) {\r\n            draw.lineTo(x, y);\r\n            draw.stroke();\r\n        }\r\n        this.setState({ x: x, y: y });\r\n    }\r\n\r\n    resetStatus = () => {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                statusMessage: null\r\n            });\r\n        }, 3000);\r\n    }\r\n\r\n    mouseDown = () => {\r\n        this.setState({ clicked: true });\r\n        this.state.draw.beginPath();\r\n    }\r\n\r\n    mouseUp = () => {\r\n        this.setState({ clicked: false });\r\n    }\r\n\r\n    mouseLeave = () => {\r\n        this.state.socket.emit(\"mouse\", {\r\n            clicked: false\r\n        });\r\n        this.setState({\r\n            clicked: false\r\n        });\r\n    }\r\n\r\n    touch = (e) => {\r\n        var touch = e.touches[0];\r\n        var mouseEvent = new MouseEvent(\"mousemove\", {\r\n            clientX: touch.clientX,\r\n            clientY: touch.clientY\r\n        });\r\n        this.state.draw.dispatchEvent(mouseEvent);\r\n    }\r\n\r\n    setName = () => {\r\n        const { id, name, socket } = this.state;\r\n        socket.emit(\"nameSelect\", { id: id, name });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <InputGroup id=\"name-set\">\r\n                    <Label>Name</Label>\r\n                    <Input onChange={(e) => this.setState({ name: e.target.value })}></Input>\r\n                    <Button onClick={this.setName}>Set</Button>\r\n                </InputGroup>\r\n                <canvas ref=\"canvas\" id=\"layer2\" width={800} height={425} onTouchMove={this.touch} onMouseDown={this.mouseDown} onMouseLeave={this.mouseLeave} onMouseUp={this.mouseUp} onMouseMove={this.mouseMoved}></canvas>\r\n                <canvas ref=\"partner\" id=\"layer1\" width={800} height={425}></canvas>\r\n                {this.state.statusMessage && <Alert>{this.state.statusMessage}</Alert>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport DrawArea from './DrawArea';\n\nclass App extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<DrawArea></DrawArea>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}